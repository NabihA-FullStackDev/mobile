rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /entry/{documentId} {
      allow create: if request.auth != null &&
                    request.resource.data.keys().hasOnly(['createdAt', 'title', 'feeling', 'text', 'email', 'userID']) &&
                    request.resource.data.createdAt is timestamp &&
                    request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                    request.resource.data.feeling is string && request.resource.data.feeling.size() > 0 &&
                    request.resource.data.text is string && request.resource.data.text.size() > 0 &&
                    request.resource.data.userID is string && request.resource.data.userID.size() > 0 &&
                    request.resource.data.email == request.auth.token.email;

      allow read: if request.auth != null &&
                  resource.data.userID == request.auth.uid;

      allow update: if request.auth != null &&
                    resource.data.email == request.auth.token.email &&
                    request.resource.data.keys().hasOnly(['createdAt', 'title', 'feeling', 'text', 'email', 'userID']) &&
                    request.resource.data.createdAt is timestamp &&
                    request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                    request.resource.data.feeling is string && request.resource.data.feeling.size() > 0 &&
                    request.resource.data.text is string && request.resource.data.text.size() > 0 &&
                    request.resource.data.userID is string && request.resource.data.userID.size() > 0 &&
                    request.resource.data.email == request.auth.token.email;

      allow delete: if request.auth != null &&
                    resource.data.userID == request.auth.uid;
    }
  }
}